from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import asyncio
from datetime import datetime, timedelta

API_TOKEN = '7792032422:AAGUJAbT7VOt_E3zHdCG-tWkGbqRXckpbxY'
ADMIN_ID = 856435420

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

appointments = []  # –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Booking(StatesGroup):
    service = State()
    day = State()
    time = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))

services_kb = ReplyKeyboardMarkup(resize_keyboard=True)
services_kb.add("–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –ú–∞–Ω–∏–∫—é—Ä", "–ú–∞–Ω–∏–∫—é—Ä + –ø–æ–∫—Ä—ã—Ç–∏–µ", "–ú–∞–Ω–∏–∫—é—Ä + —Å–Ω—è—Ç–∏–µ + –ø–æ–∫—Ä—ã—Ç–∏–µ")
services_kb.add("–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ")
services_kb.add("üîô –ù–∞–∑–∞–¥")

days_kb = ReplyKeyboardMarkup(resize_keyboard=True)
days_kb.add("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥")
days_kb.add("üîô –ù–∞–∑–∞–¥")

times_kb = ReplyKeyboardMarkup(resize_keyboard=True)
times_kb.add("10:00", "12:00", "14:00", "16:00")
times_kb.add("üîô –ù–∞–∑–∞–¥")

confirm_kb = ReplyKeyboardMarkup(resize_keyboard=True)
confirm_kb.add("üîÅ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
confirm_kb.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–Ω–∞, —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∂–º–∏ –∫–Ω–æ–ø–∫—É!!", reply_markup=main_kb)

@dp.message_handler(Text(equals="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def choose_service(message: types.Message):
    await Booking.service.set()
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=services_kb)

@dp.message_handler(state=Booking.service)
async def choose_day(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await cmd_start(message, state)
        return
    await state.update_data(service=message.text)
    await Booking.next()
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=days_kb)

@dp.message_handler(state=Booking.day)
async def choose_time(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await choose_service(message)
        return
    await state.update_data(day=message.text)
    await Booking.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=times_kb)

@dp.message_handler(state=Booking.time)
async def confirm_booking(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await choose_day(message, state)
        return
    await state.update_data(time=message.text)
    data = await state.get_data()
    text = (
        f"<b>–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        f"üßæ –£—Å–ª—É–≥–∞: {data['service']}\n"
        f"üìÖ –î–µ–Ω—å: {data['day']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=confirm_kb)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    appointments.append({
        'user_id': message.from_user.id,
        'user_name': message.from_user.full_name,
        'service': data['service'],
        'day': data['day'],
        'time': datetime.strptime(f"{data['day']} {data['time']}", "%A %H:%M")  # –ü—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    })

@dp.message_handler(Text(equals="üîÅ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å"))
async def reschedule(message: types.Message, state: FSMContext):
    await choose_service(message)

@dp.message_handler(Text(equals="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"))
async def cancel_booking(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø–∏—à–∏ ü•∞", reply_markup=main_kb)

@dp.message_handler(Text(equals="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def go_home(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    if not appointments:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return
    text = "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n"
    for i, a in enumerate(appointments):
        text += f"{i+1}. {a['user_name']} ‚Äî {a['service']} ‚Äî {a['time'].strftime('%A %H:%M')}\n"
    await message.answer(text)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def notify_upcoming_appointments():
    while True:
        now = datetime.now()
        for appointment in appointments:
            time_diff = appointment['time'] - now
            if timedelta(hours=23, minutes=59) < time_diff < timedelta(days=1, minutes=1):
                await bot.send_message(
                    appointment['user_id'],
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —É –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {appointment['service']} –≤ {appointment['time'].strftime('%H:%M')}"
                )
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notify_upcoming_appointments())
    executor.start_polling(dp, skip_updates=True)

